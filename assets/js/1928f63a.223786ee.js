"use strict";(self.webpackChunkrust_tutorial=self.webpackChunkrust_tutorial||[]).push([[849],{9030:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>u,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>a,toc:()=>d});var i=t(7462),r=(t(7294),t(3905)),s=t(814);const l={title:"Hello world"},o=void 0,a={unversionedId:"basics/hello-world",id:"basics/hello-world",title:"Hello world",description:'We will follow the customary first program "hello world".',source:"@site/docs/basics/01-hello-world.mdx",sourceDirName:"basics",slug:"/basics/hello-world",permalink:"/rust/basics/hello-world",draft:!1,editUrl:"https://github.com/pranabdas/rust/blob/main/docs/basics/01-hello-world.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Hello world"},sidebar:"docs",previous:{title:"Basics",permalink:"/rust/category/basics"},next:{title:"Variables",permalink:"/rust/basics/variables"}},u={},d=[],p={toc:d};function c(n){let{components:e,...t}=n;return(0,r.kt)("wrapper",(0,i.Z)({},p,t,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,'We will follow the customary first program "hello world".'),(0,r.kt)(s.Z,{language:"rust",title:"src/01-hello-world/main.rs",showLineNumbers:!0,mdxType:"CodeBlock"},'use std::io::{self, Write}; // require for flushing tty\n\nfn main() {\n    // the exclamation mark indicates println is a macro, without `!` it would\n    // indicate a function. Macro is similar to inline functions. Corresponding\n    // code is inserted where the macro is used\n    println!("Hello, rust!");\n\n    // use placeholder\n    println!("{} {}", "Let\'s", "begin.");\n    println!("I am {} years old.", 35);\n    println!("{} + {} = {}", 22, 34, 22 + 34);\n    println!("Is 3 > 4? {}", 3 > 4);\n\n    // print multiple lines and line breaks\n    println!("Rust is suitable for\\nsystem programming.");\n    println!(\n        "These are \nseparate lines."\n    );\n    println!(\n        "This is \\\n    same line."\n    );\n\n    // use println (instead of print) wherever possible\n    // print without new line\n    print!("Happy ");\n    io::stdout().flush().unwrap();\n    println!("learning!");\n}\n'))}c.isMDXComponent=!0}}]);