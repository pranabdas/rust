"use strict";(self.webpackChunkrust_tutorial=self.webpackChunkrust_tutorial||[]).push([["960"],{4531:function(e,n,r){r.r(n),r.d(n,{metadata:()=>a,contentTitle:()=>l,default:()=>p,assets:()=>i,toc:()=>d,frontMatter:()=>t});var a=JSON.parse('{"id":"setup","title":"Installing Rust in your computer","description":"Go to the website https://rustup.rs and follow the instruction for your OS. On","source":"@site/docs/setup.md","sourceDirName":".","slug":"/","permalink":"/rust/","draft":false,"unlisted":false,"editUrl":"https://github.com/pranabdas/rust/blob/main/docs/setup.md","tags":[],"version":"current","frontMatter":{"title":"Installing Rust in your computer","sidebar_label":"Setup","slug":"/"},"sidebar":"docs","next":{"title":"Basics","permalink":"/rust/category/basics"}}'),s=r("5893"),c=r("65");let t={title:"Installing Rust in your computer",sidebar_label:"Setup",slug:"/"},l=void 0,i={},d=[{value:"cargo",id:"cargo",level:2},{value:"Additional tools",id:"additional-tools",level:2}];function o(e){let n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["Go to the website ",(0,s.jsx)(n.a,{href:"https://rustup.rs",children:"https://rustup.rs"})," and follow the instruction for your OS. On\nUNIX/Linux:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n"})}),"\n",(0,s.jsx)(n.p,{children:"Non interactive install in Ubuntu:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"apt update && apt install -y curl && \\\ncurl https://sh.rustup.rs -sSf | sh -s -- -y\n# source $HOME/.cargo/env\n"})}),"\n",(0,s.jsx)(n.p,{children:"Once the program is installed, we can check by printing its version:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"rustc --version\n"})}),"\n",(0,s.jsx)(n.p,{children:"For updating:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"rustup update\n"})}),"\n",(0,s.jsx)(n.p,{children:"Compiling a simple program:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"rustc main.rs\n\n# if you would like to change the name of the output\nrustc main.rs -o my_program\n\n# optimize the executable\nrustc -O main.rs\n"})}),"\n",(0,s.jsx)(n.p,{children:"Executing the binary after compilation:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"./main\n"})}),"\n",(0,s.jsx)(n.h2,{id:"cargo",children:"cargo"}),"\n",(0,s.jsxs)(n.p,{children:["For larger rust projects (with other package dependencies and with large number\nof source files), rust package manager ",(0,s.jsx)(n.code,{children:"cargo"})," can be used. Create a new\nproject:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cargo new my_rust_project\n"})}),"\n",(0,s.jsxs)(n.p,{children:["There are two types of crates/ packages: library and binary. By default, cargo\nwill create binary packages, which contains a ",(0,s.jsx)(n.code,{children:"main"})," program. We can create\nspecific type of package by:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cargo new my_rust_project --bin\ncargo new my_rust_project --lib\n"})}),"\n",(0,s.jsx)(n.p,{children:"Alternatively, we can create our project folder manually, and initialize cargo:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"mkdir new_rust_project\ncd new_rust_project\ncargo init\n# or\ncargo init --lib\n"})}),"\n",(0,s.jsx)(n.p,{children:"Run:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd my_rust_project\ncargo run\n"})}),"\n",(0,s.jsx)(n.p,{children:"Build:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cargo build\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Executable will be placed under: ",(0,s.jsx)(n.code,{children:"target/debug/"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Release:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cargo build --release\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You can find optimized binary under: ",(0,s.jsx)(n.code,{children:"target/release/"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Update cargo dependencies:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cargo update --dry-run\ncargo update\n\n# update specific package(s)\ncargo update -p rand -p color\n\ncargo update -p rand --precise 0.8.0\n"})}),"\n",(0,s.jsx)(n.h2,{id:"additional-tools",children:"Additional tools"}),"\n",(0,s.jsx)(n.p,{children:"Clippy:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"rustup component add clippy\n"})}),"\n",(0,s.jsx)(n.p,{children:"Use clippy:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cargo clippy\n"})}),"\n",(0,s.jsx)(n.p,{children:"It is probably faster than compile and run the code."}),"\n",(0,s.jsx)(n.p,{children:"Rust analyzer:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"rustup component add rust-analyzer\n"})})]})}function p(e={}){let{wrapper:n}={...(0,c.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}}}]);