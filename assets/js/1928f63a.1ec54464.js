"use strict";(self.webpackChunkrust_tutorial=self.webpackChunkrust_tutorial||[]).push([["32"],{1347:function(n,e,t){t.r(e),t.d(e,{frontMatter:()=>a,toc:()=>d,default:()=>c,metadata:()=>r,assets:()=>u,contentTitle:()=>o});var r=JSON.parse('{"id":"basics/hello-world","title":"Hello world","description":"We will follow the customary first program \\"hello world\\".","source":"@site/docs/basics/01-hello-world.mdx","sourceDirName":"basics","slug":"/basics/hello-world","permalink":"/rust/basics/hello-world","draft":false,"unlisted":false,"editUrl":"https://github.com/pranabdas/rust/blob/main/docs/basics/01-hello-world.mdx","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Hello world"},"sidebar":"docs","previous":{"title":"Basics","permalink":"/rust/category/basics"},"next":{"title":"Variables","permalink":"/rust/basics/variables"}}'),i=t(4848),l=t(4429),s=t(4565);let a={title:"Hello world"},o=void 0,u={},d=[];function p(n){let e={p:"p",...(0,l.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.p,{children:'We will follow the customary first program "hello world".'}),"\n","\n",(0,i.jsx)(s.A,{language:"rust",title:"src/01-hello-world/main.rs",showLineNumbers:!0,children:'use std::io::{self, Write}; // require for flushing tty\n// macros like println, basic data types etc. are included in rust standard\n// library prelude, if we need anything extra, we need to import them manually\n\nfn main() {\n    // the exclamation mark indicates println is a macro, without `!` it would\n    // indicate a function. Macro is similar to inline functions. Corresponding\n    // code is inserted where the macro is used\n    println!("Hello, rust!");\n\n    // use placeholder\n    println!("{} {}", "Let\'s", "begin.");\n    println!("I am {} years old.", 35);\n    println!("{} + {} = {}", 22, 34, 22 + 34);\n    println!("Is 3 > 4 ? {}", 3 > 4);\n    // rust figures out correct formatting via Display trait (it will work most\n    // cases)\n\n    // we can use positional argument\n    println!(\n        "Hello {0}, you are {1} years old. Good bye {0}.",\n        "Pranab", 35\n    );\n    println!(\n        "Hello {name}, you are {age} years old. Good bye {name}.",\n        name = "Pranab",\n        age = 35\n    );\n\n    // complex data types that do not implement Display trait, often have debug\n    // trait\n    println!("Debug formatter: {:?}", (2, 9)); // here we try to print a tuple\n\n    // print multiple lines with line breaks\n    println!("Rust is suitable for\\nsystem programming.");\n\n    println!(\n        "These are\nseparate lines."\n    );\n\n    println!(\n        "This is \\\n    same line."\n    );\n\n    // use println (instead of print) wherever possible\n    // print without new line\n    print!("Happy ");\n    io::stdout().flush().unwrap();\n    println!("learning!");\n}\n'})]})}function c(n={}){let{wrapper:e}={...(0,l.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(p,{...n})}):p(n)}}}]);