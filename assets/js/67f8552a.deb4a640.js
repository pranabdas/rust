"use strict";(self.webpackChunkrust_tutorial=self.webpackChunkrust_tutorial||[]).push([[209],{9936:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var n=t(7462),s=(t(7294),t(3905)),i=t(814);const r={title:"Variable assignment",sidebar_label:"Variables"},l=void 0,o={unversionedId:"basics/variables",id:"basics/variables",title:"Variable assignment",description:"In this we will assign variable.",source:"@site/docs/basics/02-variables.mdx",sourceDirName:"basics",slug:"/basics/variables",permalink:"/rust/basics/variables",draft:!1,editUrl:"https://github.com/pranabdas/rust/blob/main/docs/basics/02-variables.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Variable assignment",sidebar_label:"Variables"},sidebar:"docs",previous:{title:"Hello world",permalink:"/rust/basics/hello-world"},next:{title:"Data type",permalink:"/rust/basics/data-type"}},c={},d=[{value:"String",id:"string",level:3}],b={toc:d};function p(e){let{components:a,...t}=e;return(0,s.kt)("wrapper",(0,n.Z)({},b,t,{components:a,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"In this we will assign variable."),(0,s.kt)(i.Z,{language:"rust",title:"src/02-variables/main.rs",showLineNumbers:!0,mdxType:"CodeBlock"},'fn main() {\n    let age = 34; // by default variables are immutable\n    println!("I\'m {} years old.", age);\n\n    // need to explicitly declare mutable variables with keyword mut\n    let mut x = 10;\n    println!("My variable = {}", x);\n\n    x = 10 + 5;\n    println!("My variable = {}", x);\n\n    const PI: f64 = 3.14159; // mut keyword is not allowed with const\n    println!("Pi * 2 = {}", PI * 2.0); // int cannot be multiplied by float\n\n    // variable shadowing\n    let spaces = "   ";\n\n    // it is allowed to declare variables with same name shadowing the previous\n    // variable with the same name\n    let spaces = spaces.len(); // notice data type is different too\n\n    {\n        let spaces = spaces * 2;\n        println!("double spaces (inner scope) = {spaces}");\n    }\n\n    println!("spaces (outer scope) =  {spaces}");\n\n    // if a variable is declared but never used, use _ prefix to hide warnings\n    // we can just use `_` naming for throwaway variable (note that isolated `_`\n    // cannot be used in any expression, `_name` can be)\n\n    // underscores in numeric literals for better readability\n    // can be used for int, float, hexadecimal, and other formats\n    // let binary = 0b_0110_1001_1111_0001;\n    println!("2 million: {}", 2_000_000);\n\n    // static declaration (not used extensively)\n    // type declaration is must for static\n    // static values are always immutable\n    // uses static allocation (in contrast to stack allocation)\n    // style guide: use capital letters for static variables (separated with\n    // underscores)\n    static NO_WEEK_DAYS: i32 = 7;\n    println!("No of days in a week = {}", NO_WEEK_DAYS);\n}\n'),(0,s.kt)("h3",{id:"string"},"String"),(0,s.kt)(i.Z,{language:"rust",title:"src/02-string/main.rs",showLineNumbers:!0,mdxType:"CodeBlock"},'fn main() {\n    let mut planet = String::from("Earth");\n    // this assignment is different from string literal\n    // String type stored in the heap and its size can be dynamically changed\n    // a corresponding pointer, len, and capacity is stored in the stack\n    planet.push_str(" has one moon.");\n    // if the heap needs to move the message to a new location in order to\n    // accommodate the new size, it will also update the pointer address\n    println!("{planet}");\n}\n'))}p.isMDXComponent=!0}}]);